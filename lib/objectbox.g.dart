// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'data/model/weather_model_ob.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 4395044592180448282),
      name: 'WeatherModelOb',
      lastPropertyId: const IdUid(10, 2597206949876380753),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1002971805710400305),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7928604051185277545),
            name: 'latitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4684374702802832492),
            name: 'longitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3747192240416756956),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 6035303480510351364),
            name: 'state',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3995268445808762370),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 9060823122309760903),
            name: 'temp',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2637995667302588553),
            name: 'fechaActualizacion',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5204741391968314859),
            name: 'iconWeather',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2597206949876380753),
            name: 'descriptionWeather',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(1, 4395044592180448282),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    WeatherModelOb: EntityDefinition<WeatherModelOb>(
        model: _entities[0],
        toOneRelations: (WeatherModelOb object) => [],
        toManyRelations: (WeatherModelOb object) => {},
        getId: (WeatherModelOb object) => object.id,
        setId: (WeatherModelOb object, int id) {
          object.id = id;
        },
        objectToFB: (WeatherModelOb object, fb.Builder fbb) {
          final cityOffset = fbb.writeString(object.city);
          final stateOffset = fbb.writeString(object.state);
          final countryOffset = fbb.writeString(object.country);
          final iconWeatherOffset = fbb.writeString(object.iconWeather);
          final descriptionWeatherOffset =
              fbb.writeString(object.descriptionWeather);
          fbb.startTable(11);
          fbb.addInt64(0, object.id);
          fbb.addFloat64(1, object.latitude);
          fbb.addFloat64(2, object.longitude);
          fbb.addOffset(3, cityOffset);
          fbb.addOffset(4, stateOffset);
          fbb.addOffset(5, countryOffset);
          fbb.addFloat64(6, object.temp);
          fbb.addInt64(7, object.fechaActualizacion);
          fbb.addOffset(8, iconWeatherOffset);
          fbb.addOffset(9, descriptionWeatherOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WeatherModelOb(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              latitude:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 6, 0),
              longitude:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 8, 0),
              city: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              state: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              country: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              temp:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0),
              fechaActualizacion:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              iconWeather: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              descriptionWeather: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [WeatherModelOb] entity fields to define ObjectBox queries.
class WeatherModelOb_ {
  /// see [WeatherModelOb.id]
  static final id =
      QueryIntegerProperty<WeatherModelOb>(_entities[0].properties[0]);

  /// see [WeatherModelOb.latitude]
  static final latitude =
      QueryDoubleProperty<WeatherModelOb>(_entities[0].properties[1]);

  /// see [WeatherModelOb.longitude]
  static final longitude =
      QueryDoubleProperty<WeatherModelOb>(_entities[0].properties[2]);

  /// see [WeatherModelOb.city]
  static final city =
      QueryStringProperty<WeatherModelOb>(_entities[0].properties[3]);

  /// see [WeatherModelOb.state]
  static final state =
      QueryStringProperty<WeatherModelOb>(_entities[0].properties[4]);

  /// see [WeatherModelOb.country]
  static final country =
      QueryStringProperty<WeatherModelOb>(_entities[0].properties[5]);

  /// see [WeatherModelOb.temp]
  static final temp =
      QueryDoubleProperty<WeatherModelOb>(_entities[0].properties[6]);

  /// see [WeatherModelOb.fechaActualizacion]
  static final fechaActualizacion =
      QueryIntegerProperty<WeatherModelOb>(_entities[0].properties[7]);

  /// see [WeatherModelOb.iconWeather]
  static final iconWeather =
      QueryStringProperty<WeatherModelOb>(_entities[0].properties[8]);

  /// see [WeatherModelOb.descriptionWeather]
  static final descriptionWeather =
      QueryStringProperty<WeatherModelOb>(_entities[0].properties[9]);
}
